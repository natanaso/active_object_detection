<launch>
  	<arg name="map_suffix"/>
  	<arg name="use_right_arm" default="true" />
  	<arg name="use_left_arm" default="true" />
	<arg name="log_to_warehouse" default="false" />

	<arg if="$(arg use_right_arm)"      name="right_arm_text" value="right" />
	<arg unless="$(arg use_right_arm)"  name="right_arm_text" value="" />
	<arg if="$(arg use_left_arm)"       name="left_arm_text" value="left" />
	<arg unless="$(arg use_left_arm)"   name="left_arm_text" value="" />
	<arg name="arm_config" value="$(arg right_arm_text)_$(arg left_arm_text)" />
	
	<!-- Throttle the joint states for use in Sbpl3DNavPlanner	-->
	<node pkg="topic_tools" type="throttle" name="throttle_joint_states" args="messages joint_states 4.0"/> 

	<!-- move_base with sbpl_3dnav_planner as a plugin -->
	<node pkg="move_base" type="move_base" name="move_base" output="screen" >
		<param name="base_global_planner" value="Sbpl3DNavPlanner"/>
		<rosparam file="$(find gazebo_simulation)/config/sbpl_fullbody_config/pr2_both_arms_$(arg map_suffix).yaml" command="load"/>
		<!-- define collision spheres here -->
		<rosparam file="$(find gazebo_simulation)/config/sbpl_fullbody_config/pr2_body.yaml" command="load"/>

		<param name="planner/motion_primitive_file" value="$(find sbpl_full_body_planner)/config/pr2-32.mprim"/>
		<param name="planner/base_motion_primitive_file" value="$(find sbpl_full_body_planner)/config/full_body_base.mprim"/>
		<param name="planner/left_arm_description_file" value="$(find sbpl_arm_planner)/config/pr2_left_arm.cfg"/>
		<param name="planner/right_arm_description_file" value="$(find sbpl_arm_planner)/config/pr2_right_arm.cfg"/>

		<param name="minimum_working_distance" value="0.3"/>
		<param name="maximum_working_distance" value="0.7"/>
		<param name="yaw_steps" value="30"/>
		<param name="radii_steps" value="10"/>

		<!-- For SBPL3DNavPlanner -->
		<remap from="joint_states" to="joint_states_throttle" />

		<remap from="cmd_vel" to="base_controller/command"/>
		<remap from="collision_map_occ" to="collision_map_out"/>

		<rosparam file="$(find sbpl_3dnav_planner)/config/sbpl_global_params.yaml" command="load"/>
		<rosparam file="$(find sbpl_3dnav_planner)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find sbpl_3dnav_planner)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find sbpl_3dnav_planner)/config/local_costmap_params_close.yaml" command="load" />
		<rosparam file="$(find sbpl_3dnav_planner)/config/global_costmap_params.yaml" command="load" />
		<rosparam file="$(find sbpl_3dnav_planner)/config/base_local_planner_trajectory.yaml" command="load" />
		<rosparam file="$(find sbpl_3dnav_planner)/config/base_local_planner_poses.yaml" command="load" />
	</node>



	<!-- ARM PLANNING -->
	<!-- State transformer is necessary for arm planner -->
	<node pkg="state_transformer" name="state_transformer" type="state_transformer"/>

	<!-- 1. Planning Environment -->
	<rosparam command="load" ns="robot_description_planning" file="$(find pr2_asus_arm_arm_navigation)/config/pr2_asus_arm_planning_description.yaml" />
	<node pkg="planning_environment" type="environment_server" output="screen" 
			name="environment_server" machine="c2">      
		<param name="use_monitor" type="bool" value="true"/>
		<param name="use_collision_map" type="bool" value="true"/>

		<!-- Uncomment this line if you want to use the static map for manipulation planning. 
		It's recommended if you have a good static map -->
		<remap from="collision_map_occ" to="collision_map_out" /> <!-- -->
	</node>
	<node pkg="planning_environment" type="planning_scene_validity_server" output="screen" 
			name="planning_scene_validity_server" machine="c2"/> 
	
	<!-- 2. Constraint Aware Kinematics -->
	<group if="$(arg use_left_arm)">
		<node machine="c2" pkg="arm_kinematics_constraint_aware" type="arm_kinematics_constraint_aware"
				name="pr2_left_arm_kinematics" output="screen">
		  <param name="group" type="string" value="left_arm" />
		  <param name="left_arm/root_name" type="string" value="torso_lift_link" />
		  <param name="left_arm/tip_name" type="string" value="l_wrist_roll_link" />
		  <param name="kinematics_solver" type="string" value="arm_kinematics_constraint_aware/KDLArmKinematicsPlugin" />
		</node>
	</group>
	<group if="$(arg use_right_arm)">
		<node machine="c2" pkg="arm_kinematics_constraint_aware" type="arm_kinematics_constraint_aware"
				name="pr2_right_arm_kinematics" output="screen">
		  <param name="group" type="string" value="right_arm" />
		  <param name="right_arm/root_name" type="string" value="torso_lift_link" />
		  <param name="right_arm/tip_name" type="string" value="r_wrist_roll_link" />
		  <param name="kinematics_solver" type="string" value="arm_kinematics_constraint_aware/KDLArmKinematicsPlugin" />
		</node>
	</group>
	<!-- IMPORTANT -->
  	<param name="pr2_right_arm_kinematics/object_padd" value="0.04"/>
  	<param name="pr2_left_arm_kinematics/object_padd" value="0.04"/>
	
	<!-- interpolated IK -->
	<node if="$(arg use_right_arm)" name="interpolated_ik_node_right" pkg="interpolated_ik_motion_planner" 
			 type="interpolated_ik_motion_planner.py" args="r" respawn="false" machine="c2"/>
	<node if="$(arg use_left_arm)" name="interpolated_ik_node_left" pkg="interpolated_ik_motion_planner" 
	      type="interpolated_ik_motion_planner.py" args="l" respawn="false" machine="c2"/>


	<!-- 3. OMPL Planning -->
	<node machine="c2" pkg="ompl_ros_interface" type="ompl_ros" name="ompl_planning" output="screen">    
		<!-- if we are moving the base, it is best to maintain the map in a fixed frame -->
		<!-- since identified objects that are being published are not necessarily updated -->
		<!--    <param name="planner_frame_id" type="string" value="odom_combined" /> -->
		<param name="planner_frame_id" type="string" value="map" />

		<!-- planner configs -->
		<param name="default_planner_config" type="string" value="SBLkConfig1"/>
		<rosparam command="load" file="$(find pr2_arm_navigation_planning)/config/$(arg arm_config)_arm_groups.yaml" />
		<rosparam command="load" file="$(find pr2_asus_arm_arm_navigation)/config/ompl_planning.yaml" />
	</node>


	<!-- 4. Trajectory Filter -->
	<node pkg="trajectory_filter_server" type="trajectory_filter_server" 
			name="trajectory_filter_unnormalizer" output="screen">
		<rosparam command="load" file="$(find trajectory_filter_server)/config/filters.yaml" />
		<rosparam command="load" file="$(find pr2_asus_arm_arm_navigation)/config/joint_limits.yaml" />
	</node>
	<param name="trajectory_filter/object_padd" value="0.04"/>
	
	<!--
	<node pkg="trajectory_filter_server" name="trajectory_filter_unnormalizer" type="trajectory_filter_server" output="screen">
		<rosparam command="load" file="$(find trajectory_filter_server)/config/filter_unnormalize.yaml"/>
	</node>
	-->
	
	<!-- 5. Move groups -->
	<group if="$(arg use_left_arm)">
		<!-- a) Move l_end_effector 
		<node pkg="move_arm" type="move_arm_simple_action" name="pr2_r_arm_kinect_move_l_end_effector">
		     <param name="group" type="string" value="l_end_effector" />
		     <remap from="arm_ik" to="pr2_r_arm_kinect_l_end_effector_kinematics/get_constraint_aware_ik" />
		     <param name="controller_action_name" type="string" value="l_end_effector_controller/follow_joint_trajectory" />
		</node>
		-->
		<!-- b) Move left_arm  -->
		<node pkg="move_arm_warehouse" type="move_arm_simple_action" output="screen" name="move_left_arm">    
			<param name="group" type="string" value="left_arm" />
			<remap from="arm_ik" to="pr2_left_arm_kinematics/get_constraint_aware_ik" />	
			<param name="controller_action_name" type="string" value="/l_arm_controller/follow_joint_trajectory" />
			<!-- <param name="controller_action_name" type="string" value="left_arm_controller/follow_joint_trajectory" /> -->
			<param name="head_monitor_link" type="string" value="l_wrist_roll_link" />
			<param name="log_to_warehouse" value="$(arg log_to_warehouse)"/>
		</node>
	</group>
	<group if="$(arg use_right_arm)">
		<!-- c) Move r_end_effector 
		<node pkg="move_arm" type="move_arm_simple_action" name="pr2_r_arm_kinect_move_r_end_effector">
			<param name="group" type="string" value="r_end_effector" />
			<remap from="arm_ik" to="pr2_r_arm_kinect_r_end_effector_kinematics/get_constraint_aware_ik" />
			<param name="controller_action_name" type="string" value="r_end_effector_controller/follow_joint_trajectory" />
		</node>
		-->
		<!-- d) Move right_arm  -->
		<node pkg="move_arm_warehouse" type="move_arm_simple_action" output="screen" name="move_right_arm">    
			<param name="group" type="string" value="right_arm" />
			<remap from="arm_ik" to="pr2_right_arm_kinematics/get_constraint_aware_ik" />	
			<param name="controller_action_name" type="string" value="/r_arm_controller/follow_joint_trajectory" />
			<!-- <param name="controller_action_name" type="string" value="right_arm_controller/follow_joint_trajectory" /> -->
			<param name="head_monitor_link" type="string" value="r_wrist_roll_link" />
			<param name="log_to_warehouse" value="$(arg log_to_warehouse)"/>
			<param name="ik_allowed_time" type="double" value="5.0"/>
		</node>
		<!--
		<node pkg="move_arm" type="move_arm_simple_action" output="screen" name="move_right_arm">
      	<param name="group" type="string" value="right_arm" />
      	<remap from="arm_ik" to="pr2_right_arm_kinematics/get_constraint_aware_ik" />
      	<param name="controller_action_name" type="string" value="/r_arm_controller/follow_joint_trajectory" />
      	<param name="head_monitor_link" type="string" value="r_wrist_roll_link" />
    	</node>
    	-->
	</group>

	<!-- head_monitor for arm movement -->
	<node pkg="move_arm_head_monitor" type="move_arm_head_monitor" name="head_monitor" output="screen" machine="c2">
		<remap from="cloud_in" to="/narrow_stereo_textured/points2_filtered_attached" />
		<param name="do_preplan_scan" value="false"/>
		<param name="do_monitoring" value="false"/>
		<param name="use_left_arm" value="$(arg use_left_arm)"/>
		<param name="use_right_arm" value="$(arg use_right_arm)"/>
	</node>
	
	
	<!-- Two arm movement -->
	<include file="$(find pr2_arm_navigation_filtering)/launch/both_arms_filters.launch"/>
	<include file="$(find gazebo_simulation)/launch/pr2_main_functionality/pr2_two_arm_controller.launch"/>
	

</launch>
